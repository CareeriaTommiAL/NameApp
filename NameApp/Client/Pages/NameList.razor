@page "/namelist"
@using NameApp.Shared
@inject HttpClient Http
@inject NavigationManager navManager

<h2>Name List</h2>
<br />
<h3>Total Names: @nameCount</h3>

<br />

@if (names == null)
{
    <p><em>Loading...</em></p>
}
else if (filteredNameList != null)
{
    <TableTemplate Items="filteredNameList">
        <TableHeader>
            <Search ColumnTitle="Name" OnSearchTextChanged="OnNameSearchTextChanged"></Search>
            <th>Amount</th>
        </TableHeader>
        <RowTemplate Context="names">
            <td>@names.Nimi</td>
            <td>@names.Amount</td>
        </RowTemplate>
    </TableTemplate>
}
else
{
    <TableTemplate Items="nameList">
        <TableHeader>
            <Search ColumnTitle="Name" OnSearchTextChanged="OnNameSearchTextChanged"></Search>
            <th>Amount</th>
        </TableHeader>
        <RowTemplate Context="names">
            <td>@names.Nimi</td>
            <td>@names.Amount</td>
        </RowTemplate>
    </TableTemplate>
}

@code {

    private int nameCount { get; set; }
    private Name[] names;
    private List<Name> nameList { get; set; }
    private List<Name> filteredNameList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        names = await Http.GetFromJsonAsync<Name[]>("api/Names");
        nameList = await Http.GetFromJsonAsync<List<Name>>("api/Names");
        nameCount = await Http.GetFromJsonAsync<int>("api/Names/countnames");
    }

    private void OnNameSearchTextChanged(ChangeEventArgs changeEventArgs)
    {
        string searchText = changeEventArgs.Value.ToString();
        filteredNameList = nameList.Where(n => n.Nimi.ToLower().Contains(searchText.Trim().ToLower())).ToList();
    }
}


Where(n => n.Nimi.ToLower().Contains(searchText.Trim().ToLower())).ToList;

